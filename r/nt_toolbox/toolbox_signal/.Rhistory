labels = sample(1:3, prob = proba, size = n, replace = T)
# multivariate normaly distributed variables
sample = list()
for(i in 1 : n)
{
sample[[i]] = c(rmvnorm(n = 1, mean = u[labels][[i]], sigma = S[labels][[i]]))
# a[[]] : to access an object of a list
}
sample = matrix(unlist(sample), ncol = 2, byrow = TRUE)
return(list(sample,labels))
}
u = list(c(4,4), c(1,1), c(2,3))
S = list(matrix(c(0.1,0,0,0.1), nrow = 2),matrix(c(0.1,0,0,0.1), nrow = 2),matrix(c(0.1,0,0,0.1), nrow = 2))
res = melange(200,u, S,proba)
plot(res[[1]], c("red","green","blue")[res[[2]]])
c("red","green","blue")[res[[2]]]
res[[1]]
plot(res[[1]], col = c("red","green","blue")[res[[2]]])
help("plot")
plot(res[[1]], col = c("red","green","blue")[res[[2]]], xlab = "X1", ylab = "X2")
plot(num,errors,col="green",type="b", main = "Erreur en fonction du nombre d'itérations", xlab = "nombre d'itération")
data = as.matrix(read.table("regression_double.txt", header = F,sep = ";"))
plot(data, col ="blue", main = "visualisation des données")
data = as.matrix(read.table("regression_double.txt", header = F,sep = ";"))
plot(data, col ="blue", main = "visualisation des données")
# Loading the model
reg = regmixEM(data[,2], data[,1])
# length of data
n = dim(data)[1]
# Compute the prediction
regs = reg$x %*% reg$beta
# Compute the probability of belongin to a class
post = reg$posterior
# Choosing the regression according to posteriors
pred = c()
for(i in 1:n)
{
pred = c(pred, regs[i,which.max(post[i,])])
}
plot(data[,1], pred, xlab = 'Variable 1', main = "Prediction en fonction de la variable prédictive")
plot(data[,2], pred, xlab = 'Variable 2', main = "Prediction en fonction de la variable prédite")
# Global error of prediction
sum((pred - data[,2])^2)
# install.packages("mixtools")
library(mixtools)
data = as.matrix(read.table("regression_double.txt", header = F,sep = ";"))
plot(data, col ="blue", main = "visualisation des données")
plot(c(0,0),c(200,200), add = T, style = 'l')
plot(c(0,200),c(0,200), add = T, style = 'l')
abline(plot(c(0,200),c(0,200), style = 'l'))
?plot
plot(c(0,200),c(0,200), type = 'l')
plot(c(0,200),c(0,200), type = 'l')
load("/Users/Abdellah/Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/SDMA/TP4/digits3-8.RData")
View(d3)
View(d3)
View(d8)
dim(d3)
dim(d8)
load("/Users/Abdellah/Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/SDMA/TP4/digits3-8.RData")
mImage = function(x)
{
m = matrix(x,16,16)
image(m, axes = FALSE, col = gray(0 : 255/255))
}
load("/Users/Abdellah/Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/SDMA/TP4/digits3-8.RData")
mImage = function(x)
{
m = matrix(x,16,16)
image(m, axes = FALSE, col = gray(0 : 255/255))
}
mImage(d3[2,])
mImage(d3[4,])
mImage(d3[17,])
mImage(d8[7,])
mImage(d8[19,])
mImage(d8[100,])
load("/Users/Abdellah/Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/SDMA/TP4/digits3-8.RData")
mImage = function(x)
{
m = matrix(x,16,16)
image(t(m), axes = FALSE, col = gray(0 : 255/255))
}
mImage(d3[2,])
mImage(d3[4,])
mImage(d3[17,])
mImage(d8[7,])
mImage(d8[19,])
mImage(d8[100,])
load("/Users/Abdellah/Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/SDMA/TP4/digits3-8.RData")
mImage = function(x)
{
m = matrix(x,16,16)
image(m, axes = FALSE, col = gray(0 : 255/255))
}
mImage(d3[199,])
mImage(d3[4,])
mImage(d3[17,])
mImage(d8[7,])
mImage(d8[19,])
mImage(d8[100,])
load("/Users/Abdellah/Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/SDMA/TP4/digits3-8.RData")
mImage = function(x)
{
m = matrix(x,16,16)
image(m, axes = FALSE, col = gray(0 : 255/255))
}
mImage(d3[199,])
mImage(d3[4,])
mImage(d3[17,])
mImage(d8[7,])
mImage(d8[19,])
mImage(d8[100,])
mImage(d8[200,])
load("/Users/Abdellah/Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/SDMA/TP4/digits3-8.RData")
mImage = function(x)
{
m = matrix(x,16,16)
image(t(m), axes = FALSE, col = gray(0 : 255/255))
}
mImage(d3[199,])
mImage(d3[4,])
mImage(d3[17,])
mImage(d8[7,])
mImage(d8[19,])
mImage(d8[100,])
mImage(d8[200,])
3_moyen = colmeans(d3)
3moyen = colmeans(d3)
troismoy = colmeans(d3)
troismoy = colmean(d3)
troismoy = colMeans(d3)
troismoy = colMeans(d3)
huitmoy = colMeans(d8)
troismoy = colMeans(d3)
huitmoy = colMeans(d8)
mImage(troismoy)
troismoy = colMeans(d3)
huitmoy = colMeans(d8)
mImage(troismoy)
mImage(huitmoy)
cor(scale(d3train))
n = nrow(d3)
lim = 1000
## set the seed to make the partition reproductible
set.seed(123)
train_indice = sample(1:n,n)[1:lim]
test_indice = sample(1:n,n)[lim:n]
# d3train, d3test, d8train, d8test
d3train = d3[train_indice,]
d8train = d8[train_indice]
d3test = d3[test_indice,]
d8test = d8[test_indice]
troismoy = colMeans(d3)
huitmoy = colMeans(d8)
mImage(troismoy)
mImage(huitmoy)
cor(scale(d3train))
svd(d3train)
eigen(cor(d3train))
eigen(cor(d3train))
svd(d3train) - eigen(cor(d3train))
svd(d3train)
res3 = svd(d3train)
eigen(cor(d3train))
res3$u
res3$d
eigen(cor(d3train))
eigen(cor(d3train))$values
res3$d
31 * 31
cor(d3train)
eigen(cor(d3train))$vectors
eigen(cor(d3train))
res3$d
d3train
d3train = scale(d3train)
cor(d3train)
d8train = scale(d8train)
cor(d8train)
d3train
troismoy = colMeans(d3)
huitmoy = colMeans(d8)
mImage(troismoy)
mImage(huitmoy)
d3train = scale(d3train)
d3train
res3 = svd(d3train)
eigen(cor(d3train))
res3$d
eigen(cor(d3train))
eigen(cor(d3train))$values
res3$d
14*14
res3 = svd(d3train)
eigen(cor(d3train))
d3train = scale(d3train)
cor(d3train)
d8train = scale(d8train)
cor(d8train)
cor(d3train)
cor(d8train)
d8train = scale(d8train)
d8train
n = nrow(d3)
lim = 1000
## set the seed to make the partition reproductible
set.seed(123)
train_indice = sample(1:n,n)[1:lim]
test_indice = sample(1:n,n)[lim:n]
# d3train, d3test, d8train, d8test
d3train = d3[train_indice,]
d8train = d8[train_indice,]
d3test = d3[test_indice,]
d8test = d8[test_indice,]
troismoy = colMeans(d3)
huitmoy = colMeans(d8)
mImage(troismoy)
mImage(huitmoy)
d3train = scale(d3train)
cor(d3train)
d8train = scale(d8train)
cor(d8train)
d3train = scale(d3train)
cor3 = cor(d3train)
d8train = scale(d8train)
cor8 = cor(d8train)
res3 = svd(d3train)
eig3 = eigen(cor(d3train))
eig3$values
res3$d
mean(d3train)
sd(d3train)
sd(d3train,1)
d3train = scale(d3train)
cor3 = cor(d3train)
d8train = scale(d8train)
cor8 = cor(d8train)
res3 = svd(d3train)
eig3 = eigen(cor(d3train))
res3$d
eig3$values
res3 = svd(d3train)
eig3 = eigen(cov(d3train))
eig3$values
res3$d
res3 = svd(d3train)
eig3 = eigen(cov(d3train))
eig3$values
171 * 171
/ 999
29241 / 999
res3 = (svd(d3train)$d)^2
eig3 = eigen(cov(d3train))
res8 = (svd(d3train)$d)^2
eig8 = eigen(cov(d3train))
plot(res3 / (n-1), eig3, main = "Correspondance des valeurs propres")
res3 = (svd(d3train)$d)^2
eig3 = eigen(cov(d3train))$values
res8 = (svd(d3train)$d)^2
eig8 = eigen(cov(d3train))$values
plot(res3 / (n-1), eig3, main = "Correspondance des valeurs propres")
# Plot des valeurs propres
val_propres = res$sdev^2
plot(1:length(val_propres),val_propres,type="b",ylab="Valeurs
propres",xlab="Composantes",main="Scree plot")
cumsum(pourc_var)
# Pourcentage de variance
plot.new()
plot(1:length(val_propres),cumsum(pourc_var),type="b",ylab="% de variance expliquée",xlab="Composantes",main="% de variance expliquée")
modes_propres = svd(cov(d3train))
modes_propres = svd(cov(d3train))$u
modes_propres = svd(cov(d3train))$u
View(modes_propres)
modes_propres = svd(cov(d3train))$u
norm(modes_propres)
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
norm_list = c(norm_list,norm(modes_propres[i]))
}
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
norm_list = c(norm_list,norm(modes_propres[i,]))
}
modes_propres[1,]
modes_propres
dim(modes_propres)
norm(as.vector(modes_propres[i,]))
modes_propres[2,]
norm(modes_propres[2,])
?norm
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
norm_list = c(norm_list,norm(as.matrix(modes_propres[i,])à)
}
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
norm_list = c(norm_list,norm(as.matrix(modes_propres[i,])))
}
plot(norm_list)
hist(norm_list)
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
u = as.matrix(modes_propres[i,])
norm_list = c(norm_list,norm(u %*% t(u)))
}
u %*% t(u))
u %*% t(u)
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
u = as.matrix(modes_propres[i,])
norm_list = c(norm_list,norm(u %*% t(u)))
}‡
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
u = as.matrix(modes_propres[i,])
norm_list = c(norm_list,norm(u %*% t(u)))
}
modes_propres = svd(cov(d3train))$u
norm_list = c()
for (i in 1 : ncol(modes_propres))
{
u = as.matrix(modes_propres[i,])
norm_list = c(norm_list,norm(u %*% t(u)))
}
hist(norm_list)
for (k in 1:4)
{
kmeans(X, k)
Projection = as.matrix(scale(X)) %*% as.matrix(res$rotation)
resk = kmeans(X,k)
plot(Projection[,1], Projection[,2], col = resk$cluster, ylab = "Composante 1", xlab = "Composante 2", main = "Affichage des différents clusters dans le premier plan factoriel")
}
#resk$centers
#resk$cluster
#hist(resk$cluster)
#resk$withinss
#resk$betweenss
for (k in 1:4)
{
kmeans(X, k)
Projection = as.matrix(scale(X)) %*% as.matrix(res$rotation)
resk = kmeans(X,k)
plot(Projection[,1], Projection[,2], col = resk$cluster, ylab = "Composante 1", xlab = "Composante 2", main = "Affichage des différents clusters dans le premier plan factoriel")
}
#resk$centers
#resk$cluster
#hist(resk$cluster)
#resk$withinss
#resk$betweenss
Projection = svd(cov(d3train))$u[,1:5]
Projection
Projection = svd(cov(d3train))$u[,1:5]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256))
as.matrix(Projection) %*% t(as.matrix(Projection))
dim(as.matrix(Projection) %*% t(as.matrix(Projection)))
diag(1,256)
dim(diag(1,256))
Projection = svd(cov(d3train))$u[,1:5]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256))
dim(Projection)
Projection = svd(cov(d3train))$u[,1:5]
# Vérification :
norm(abd(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256)))
Projection = svd(cov(d3train))$u[,1:5]
# Vérification :
norm(abs(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256)))
v = as.matrix(Projection) %*% t(as.matrix(Projection))
View(v)
Projection = svd(cov(d3train))$u[1 : 5,]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256))
Projection = svd(d3train)$u[1 : 5,]
Projection = svd(d3train)$u[,1 : 5]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256))
dim(Projection)
Projection = svd(d3train)$u[,1 : 5]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256))
Projection = svd(d3train)$u[,1 : 5]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,1000))
Projection = prcomp(d3train)$rotation[,1 : 5]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,1000))
Projection = prcomp(d3train)$rotation[,1 : 5]
Projection
View(u)
View(Projection)
Projection = prcomp(d3train)$rotation[,1 : 5]
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256))
Projection = prcomp(d3train)$rotation
# Vérification :
norm(as.matrix(Projection) %*% t(as.matrix(Projection)) - diag(1,256))
dim(rotation)
dim(Projection)
Projection[,1:5]
t(Projection[1,1:5]) %*% Projection[,1:5]
t(Projection[:,1:5]) %*% Projection[,1:5]
t(Projection[,1:5]) %*% Projection[,1:5]
library(shiny); print(source('Desktop/etudes_ecp/Cours_ECP/matiere_3A/OMA/Seminaire/Rshinytest.R')$value)
install.packages("imager")
imager(boats)
library(imager)
plot(boats)
?plot
plot(boats)
isoblur(boats, gaussian=True)
isoblur(boats, sigma=5, gaussian=TRUE)
plot(isoblur(boats, sigma=5, gaussian=TRUE))
knitr::opts_chunk$set(echo = TRUE)
str(12)
str(12) + "azz"
toString(1)
library(imager)
image = boats
plot(image)
# List of sigma valus to use
simga_list = c(1, 2, 4, 6, 8)
for (sigma in sigma_list){
image_blurred = isoblur(image, sigma=sigma, gaussain=True)
plot(image_blurred, title=paste("Blurring with sigma=",toString(sigma), sep=""))
}
# List of sigma valus to use
sigma_list = c(1, 2, 4, 6, 8)
for (sigma in sigma_list){
image_blurred = isoblur(image, sigma=sigma, gaussain=True)
plot(image_blurred, title=paste("Blurring with sigma=",toString(sigma), sep=""))
}
# List of sigma valus to use
sigma_list = c(1, 2, 4, 6, 8)
for (sigma in sigma_list){
image_blurred = isoblur(image, sigma=sigma, gaussian=TRUE)
plot(image_blurred, title=paste("Blurring with sigma=",toString(sigma), sep=""))
}
# List of sigma valus to use
sigma_list = c(1, 2, 4, 6, 8)
for (sigma in sigma_list){
image_blurred = isoblur(image, sigma=sigma, gaussian=TRUE)
plot(image_blurred)
title=paste("Blurring with sigma=",toString(sigma), sep="")
}
# List of sigma valus to use
sigma_list = c(1, 2, 4, 6, 8)
for (sigma in sigma_list){
image_blurred = isoblur(image, sigma=sigma, gaussian=TRUE)
title=paste("Blurring with sigma=",toString(sigma), sep="")
plot(image_blurred)
}
# List of sigma valus to use
sigma_list = c(1, 2, 4, 6, 8)
for (sigma in sigma_list){
image_blurred = isoblur(image, sigma=sigma, gaussian=TRUE)
title=paste("Blurring with sigma=",toString(sigma), sep="")
plot(image_blurred, main=title)
}
?plot
library(imager)
image = boats
plot(image, xaxt='n')
library(imager)
image = boats
plot(image, xaxt='n')
library(imager)
image = boats
plot(image, xaxt='n', yaxt='n')
plot(image)
plot(image, xaxt="n")
plot(image, xaxt="n")
plot(image, axes=FALSE)
library(imager)
nbiter = 10
x = [1,1]  # initial estimate of the solution
for iter in range(nbiter):  # iter goes from 0 to nbiter-1
x = x - tau*Grad_f(x)
x   # to display x, like in Matlab. Use print(x) if this is not the last command of the cell, else nothing is displayed
matrix(0, 10, 10)
a = matrix(0, 10, 10)
a[:, 1] = c(1:10)
a[1,1]
a[,1] = c(1:10)
a
IRkernel::installspec()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/',
getOption('repos')),
type = 'source')
install.packages('devtools')
remove.packages(IRkernel)
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
